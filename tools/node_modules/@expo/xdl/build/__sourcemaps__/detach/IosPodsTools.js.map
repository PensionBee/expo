{"version":3,"sources":["detach/IosPodsTools.js"],"names":["_validatePodfileSubstitutions","substitutions","validKeys","key","hasOwnProperty","includes","Error","_renderUnversionedReactNativeDependency","options","sdkVersion","sdkMajorVersion","parseSdkMajorVersion","indentString","glogLibraryName","_renderUnversionedReactDependency","_renderUnversionedYogaDependency","_renderUnversionedThirdPartyDependency","path","join","reactNativePath","attributes","inhibit_warnings","subspecs","_renderDependencyAttributes","let","podName","podspecRelativePath","podspec","attributesStrings","Object","keys","value","JSON","stringify","push","createSdkFilterFn","String","toUpperCase","undefined","match","sdkVersionWithUnderscores","replace","i","endsWith","async","_renderVersionedReactNativeDependenciesAsync","templatesDirectory","versionedReactNativePath","expoSubspecs","shellAppSdkVersion","filterFn","result","await","_concatTemplateFilesInDirectoryAsync","map","subspec","_renderVersionedReactNativePostinstallsAsync","directory","templateFilenames","globSync","absolute","cwd","sort","filteredTemplateFilenames","filter","templateStrings","fileIdx","nFiles","length","filename","templateString","fs","readFile","_renderDetachedPostinstall","isServiceContext","podNameExpression","targetExpression","podsRootSub","maybeDetachedServiceDef","maybeFrameworkSearchPathDef","excludeIdfaCodeFromBranchSinceSDK39","_renderTestTarget","_renderPodDependenciesAsync","dependenciesConfigPath","dependencies","JsonFile","readAsync","type","isPodfile","noWarningsFlag","depsStrings","dependency","builder","comments","commentLine","otherPodfileFlags","name","version","renderExpoKitPodspecAsync","pathToTemplate","pathToOutput","moreSubstitutions","dirname","IOS_EXPONENT_CLIENT_VERSION","writeFile","renderPodfileAsync","REACT_NATIVE_PATH","rnDependencyOptions","expoKitPath","EXPOKIT_PATH","expoKitTag","EXPOKIT_TAG","expoKitDependencyOptions","versionedRnPath","VERSIONED_REACT_NATIVE_PATH","rnExpoSubspecs","REACT_NATIVE_EXPO_SUBSPECS","versionedDependencies","versionedPostinstalls","podDependencies","universalModules","UNIVERSAL_MODULES","EXPONENT_CLIENT_DEPS","PODFILE_UNVERSIONED_RN_DEPENDENCY","PODFILE_DETACHED_POSTINSTALL","PODFILE_VERSIONED_RN_DEPENDENCIES","PODFILE_TEST_TARGET","replacement","RegExp"],"mappings":"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","file":"../../detach/IosPodsTools.js","sourcesContent":["import JsonFile from '@expo/json-file';\nimport fs from 'fs-extra';\nimport { sync as globSync } from 'glob';\nimport indentString from 'indent-string';\nimport path from 'path';\n\nimport { parseSdkMajorVersion } from './ExponentTools';\n\nfunction _validatePodfileSubstitutions(substitutions) {\n  const validKeys = [\n    // a pod dependency on ExpoKit (can be local or remote)\n    'EXPOKIT_DEPENDENCY',\n    // local path to ExpoKit dependency\n    'EXPOKIT_PATH',\n    // tag to use for ExpoKit dependency\n    'EXPOKIT_TAG',\n    // the contents of dependencies.json enumerated as deps in podfile format\n    'EXPONENT_CLIENT_DEPS',\n    // postinstall for detached projects (defines EX_DETACHED among other things)\n    'PODFILE_DETACHED_POSTINSTALL',\n    // same as previous but also defines EX_DETACHED_SERVICE\n    'PODFILE_DETACHED_SERVICE_POSTINSTALL',\n    // ExponentIntegrationTests\n    'PODFILE_TEST_TARGET',\n    // unversioned react native pod dependency, probably at the path given in\n    // REACT_NATIVE_PATH, with a bunch of subspecs.\n    'PODFILE_UNVERSIONED_RN_DEPENDENCY',\n    // postinstall hook for unversioned deps\n    'PODFILE_UNVERSIONED_POSTINSTALL',\n    // versioned rn dependencies (paths to versioned-react-native directories)\n    // read from template files\n    'PODFILE_VERSIONED_RN_DEPENDENCIES',\n    // versioned rn postinstall hooks read from template files\n    'PODFILE_VERSIONED_POSTINSTALLS',\n    // list of generated Expo subspecs to include under a versioned react native dependency\n    'REACT_NATIVE_EXPO_SUBSPECS',\n    // path to use for the unversioned react native dependency\n    'REACT_NATIVE_PATH',\n    // name of the main build target, e.g. Exponent\n    'TARGET_NAME',\n    // path from Podfile to versioned-react-native\n    'VERSIONED_REACT_NATIVE_PATH',\n    // Expo universal modules dependencies\n    'PODFILE_UNVERSIONED_EXPO_MODULES_DEPENDENCIES',\n    // Universal modules configurations to be included in the Podfile\n    'UNIVERSAL_MODULES',\n    // Relative path from iOS project directory to folder where unimodules are installed.\n    'UNIVERSAL_MODULES_PATH',\n  ];\n\n  for (const key in substitutions) {\n    if (substitutions.hasOwnProperty(key)) {\n      if (!validKeys.includes(key)) {\n        throw new Error(`Unrecognized Podfile template key: ${key}`);\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * @param sdkVersion if specified, indicates which sdkVersion this project uses\n *  as 'UNVERSIONED', e.g. if we are detaching a sdk15 project, we render\n *  an unversioned dependency pointing at RN#sdk-15.\n */\nfunction _renderUnversionedReactNativeDependency(options, sdkVersion) {\n  const sdkMajorVersion = parseSdkMajorVersion(sdkVersion);\n\n  if (sdkMajorVersion >= 39) {\n    return indentString(`\n# Install React Native and its dependencies\nrequire_relative '../node_modules/react-native/scripts/react_native_pods'\nuse_react_native!(production: true)`);\n  }\n\n  if (sdkMajorVersion >= 36) {\n    return indentString(\n      `\n# Install React Native and its dependencies\nrequire_relative '../node_modules/react-native/scripts/autolink-ios.rb'\nuse_react_native!`\n    );\n  }\n\n  const glogLibraryName = sdkMajorVersion < 26 ? 'GLog' : 'glog';\n  return indentString(\n    `\n${_renderUnversionedReactDependency(options)}\n${_renderUnversionedYogaDependency(options)}\n${_renderUnversionedThirdPartyDependency(\n  'DoubleConversion',\n  path.join('third-party-podspecs', 'DoubleConversion.podspec'),\n  options\n)}\n${_renderUnversionedThirdPartyDependency(\n  'Folly',\n  path.join('third-party-podspecs', 'Folly.podspec'),\n  options\n)}\n${_renderUnversionedThirdPartyDependency(\n  glogLibraryName,\n  path.join('third-party-podspecs', `${glogLibraryName}.podspec`),\n  options\n)}\n`,\n    2\n  );\n}\n\nfunction _renderUnversionedReactDependency(options, sdkVersion) {\n  if (!options.reactNativePath) {\n    throw new Error(`Unsupported options for RN dependency: ${options}`);\n  }\n  const attributes = {\n    path: options.reactNativePath,\n    inhibit_warnings: true,\n    subspecs: [\n      'Core',\n      'ART',\n      'RCTActionSheet',\n      'RCTAnimation',\n      'RCTCameraRoll',\n      'RCTGeolocation',\n      'RCTImage',\n      'RCTNetwork',\n      'RCTText',\n      'RCTVibration',\n      'RCTWebSocket',\n      'DevSupport',\n      'CxxBridge',\n    ],\n  };\n  return `pod 'React',\n${indentString(_renderDependencyAttributes(attributes), 2)}`;\n}\n\nfunction _renderUnversionedYogaDependency(options) {\n  let attributes;\n  if (options.reactNativePath) {\n    attributes = {\n      path: path.join(options.reactNativePath, 'ReactCommon', 'yoga'),\n      inhibit_warnings: true,\n    };\n  } else {\n    throw new Error(`Unsupported options for Yoga dependency: ${options}`);\n  }\n  return `pod 'yoga',\n${indentString(_renderDependencyAttributes(attributes), 2)}`;\n}\n\nfunction _renderUnversionedThirdPartyDependency(podName, podspecRelativePath, options) {\n  let attributes;\n  if (options.reactNativePath) {\n    attributes = {\n      podspec: path.join(options.reactNativePath, podspecRelativePath),\n      inhibit_warnings: true,\n    };\n  } else {\n    throw new Error(`Unsupported options for ${podName} dependency: ${options}`);\n  }\n  return `pod '${podName}',\n${indentString(_renderDependencyAttributes(attributes), 2)}`;\n}\n\nfunction _renderDependencyAttributes(attributes) {\n  const attributesStrings = [];\n  for (const key of Object.keys(attributes)) {\n    const value = JSON.stringify(attributes[key], null, 2);\n    attributesStrings.push(`:${key} => ${value}`);\n  }\n  return attributesStrings.join(',\\n');\n}\n\nfunction createSdkFilterFn(sdkVersion) {\n  if (sdkVersion && String(sdkVersion).toUpperCase() === 'UNVERSIONED') {\n    return () => false;\n  }\n  if (sdkVersion === undefined || !sdkVersion.match(/^\\d+\\.\\d+.\\d+$/)) {\n    return;\n  }\n  const sdkVersionWithUnderscores = sdkVersion.replace(/\\./g, '_');\n  return i => i.endsWith(`/ReactABI${sdkVersionWithUnderscores}.rb`);\n}\n\nasync function _renderVersionedReactNativeDependenciesAsync(\n  templatesDirectory,\n  versionedReactNativePath,\n  expoSubspecs,\n  shellAppSdkVersion\n) {\n  const filterFn = createSdkFilterFn(shellAppSdkVersion);\n  let result = await _concatTemplateFilesInDirectoryAsync(\n    path.join(templatesDirectory, 'versioned-react-native', 'dependencies'),\n    filterFn\n  );\n  expoSubspecs = expoSubspecs.map(subspec => `'${subspec}'`).join(', ');\n  result = result.replace(/\\$\\{VERSIONED_REACT_NATIVE_PATH\\}/g, versionedReactNativePath);\n  result = result.replace(/\\$\\{REACT_NATIVE_EXPO_SUBSPECS\\}/g, expoSubspecs);\n  return result;\n}\n\nasync function _renderVersionedReactNativePostinstallsAsync(\n  templatesDirectory,\n  shellAppSdkVersion\n) {\n  const filterFn = createSdkFilterFn(shellAppSdkVersion);\n  return _concatTemplateFilesInDirectoryAsync(\n    path.join(templatesDirectory, 'versioned-react-native', 'postinstalls'),\n    filterFn\n  );\n}\n\nasync function _concatTemplateFilesInDirectoryAsync(directory, filterFn) {\n  const templateFilenames = globSync('*.rb', { absolute: true, cwd: directory }).sort();\n  const filteredTemplateFilenames = filterFn\n    ? templateFilenames.filter(filterFn)\n    : templateFilenames;\n  const templateStrings = [];\n  // perform this in series in order to get deterministic output\n  for (let fileIdx = 0, nFiles = filteredTemplateFilenames.length; fileIdx < nFiles; fileIdx++) {\n    const filename = filteredTemplateFilenames[fileIdx];\n    const templateString = await fs.readFile(filename, 'utf8');\n    if (templateString) {\n      templateStrings.push(templateString);\n    }\n  }\n  return templateStrings.join('\\n');\n}\n\nfunction _renderDetachedPostinstall(sdkVersion, isServiceContext) {\n  const sdkMajorVersion = parseSdkMajorVersion(sdkVersion);\n  const podNameExpression = sdkMajorVersion < 33 ? 'target.pod_name' : 'pod_name';\n  const targetExpression = sdkMajorVersion < 33 ? 'target' : 'target_installation_result';\n\n  const podsRootSub = '${PODS_ROOT}';\n  const maybeDetachedServiceDef = isServiceContext\n    ? `config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'EX_DETACHED_SERVICE=1'`\n    : '';\n\n  const maybeFrameworkSearchPathDef =\n    sdkMajorVersion < 33\n      ? `\n          # Needed for GoogleMaps 2.x\n          config.build_settings['FRAMEWORK_SEARCH_PATHS'] ||= []\n          config.build_settings['FRAMEWORK_SEARCH_PATHS'] << '${podsRootSub}/GoogleMaps/Base/Frameworks'\n          config.build_settings['FRAMEWORK_SEARCH_PATHS'] << '${podsRootSub}/GoogleMaps/Maps/Frameworks'`\n      : '';\n  // In SDK39, in preparation for iOS 14 we've decided to remove IDFA code.\n  // By adding this macro to shell apps we'll remove this code from Branch\n  // on compilation level, see:\n  // https://github.com/BranchMetrics/ios-branch-deep-linking-attribution/blob/ac991f9d0bc9bad640b25a0f1192679a8cfa083a/Branch-SDK/BNCSystemObserver.m#L49-L75\n  const excludeIdfaCodeFromBranchSinceSDK39 =\n    sdkMajorVersion >= 39\n      ? `\n      if ${podNameExpression} == 'Branch'\n        ${targetExpression}.native_target.build_configurations.each do |config|\n          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']\n          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'BRANCH_EXCLUDE_IDFA_CODE=1'\n        end\n      end`\n      : '';\n  return `\n      if ${podNameExpression} == 'ExpoKit'\n        ${targetExpression}.native_target.build_configurations.each do |config|\n          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']\n          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'EX_DETACHED=1'\n          ${maybeDetachedServiceDef}\n          # Enable Google Maps support\n          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'HAVE_GOOGLE_MAPS=1'\n          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'HAVE_GOOGLE_MAPS_UTILS=1'\n          ${maybeFrameworkSearchPathDef}\n        end\n      end\n\n      ${excludeIdfaCodeFromBranchSinceSDK39}\n`;\n}\n\nfunction _renderTestTarget(reactNativePath) {\n  return `\n  target 'ExponentIntegrationTests' do\n    inherit! :search_paths\n  end\n\n  target 'Tests' do\n    inherit! :search_paths\n  end\n`;\n}\n\nasync function _renderPodDependenciesAsync(dependenciesConfigPath, options) {\n  const dependencies = await new JsonFile(dependenciesConfigPath).readAsync();\n  const type = options.isPodfile ? 'pod' : 'ss.dependency';\n  const noWarningsFlag = options.isPodfile ? `, :inhibit_warnings => true` : '';\n  const depsStrings = dependencies.map(dependency => {\n    let builder = '';\n    if (dependency.comments) {\n      builder += dependency.comments.map(commentLine => `  # ${commentLine}`).join('\\n');\n      builder += '\\n';\n    }\n    const otherPodfileFlags = options.isPodfile && dependency.otherPodfileFlags;\n    builder += `  ${type} '${dependency.name}', '${dependency.version}'${noWarningsFlag}${\n      otherPodfileFlags || ''\n    }`;\n    return builder;\n  });\n  return depsStrings.join('\\n');\n}\n\nasync function renderExpoKitPodspecAsync(pathToTemplate, pathToOutput, moreSubstitutions) {\n  const templatesDirectory = path.dirname(pathToTemplate);\n  const templateString = await fs.readFile(pathToTemplate, 'utf8');\n  const dependencies = await _renderPodDependenciesAsync(\n    path.join(templatesDirectory, 'dependencies.json'),\n    { isPodfile: false }\n  );\n  let result = templateString.replace(/\\$\\{IOS_EXPOKIT_DEPS\\}/g, indentString(dependencies, 2));\n  if (moreSubstitutions && moreSubstitutions.IOS_EXPONENT_CLIENT_VERSION) {\n    result = result.replace(\n      /\\$\\{IOS_EXPONENT_CLIENT_VERSION\\}/g,\n      moreSubstitutions.IOS_EXPONENT_CLIENT_VERSION\n    );\n  }\n\n  await fs.writeFile(pathToOutput, result);\n}\n\n/**\n *  @param pathToTemplate path to template Podfile\n *  @param pathToOutput path to render final Podfile\n *  @param moreSubstitutions dictionary of additional substitution keys and values to replace\n *         in the template, such as: TARGET_NAME, REACT_NATIVE_PATH\n */\nasync function renderPodfileAsync(\n  pathToTemplate,\n  pathToOutput,\n  moreSubstitutions,\n  shellAppSdkVersion,\n  sdkVersion = 'UNVERSIONED'\n) {\n  if (!moreSubstitutions) {\n    moreSubstitutions = {};\n  }\n  const templatesDirectory = path.dirname(pathToTemplate);\n  const templateString = await fs.readFile(pathToTemplate, 'utf8');\n\n  const reactNativePath = moreSubstitutions.REACT_NATIVE_PATH;\n  let rnDependencyOptions;\n  if (reactNativePath) {\n    rnDependencyOptions = { reactNativePath };\n  } else {\n    rnDependencyOptions = {};\n  }\n\n  const expoKitPath = moreSubstitutions.EXPOKIT_PATH;\n  const expoKitTag = moreSubstitutions.EXPOKIT_TAG;\n  let expoKitDependencyOptions = {};\n  if (expoKitPath) {\n    expoKitDependencyOptions = { expoKitPath };\n  } else if (expoKitTag) {\n    expoKitDependencyOptions = { expoKitTag };\n  }\n\n  let versionedRnPath = moreSubstitutions.VERSIONED_REACT_NATIVE_PATH;\n  if (!versionedRnPath) {\n    versionedRnPath = './versioned-react-native';\n  }\n  let rnExpoSubspecs = moreSubstitutions.REACT_NATIVE_EXPO_SUBSPECS;\n  if (!rnExpoSubspecs) {\n    rnExpoSubspecs = ['Expo'];\n  }\n\n  const versionedDependencies = await _renderVersionedReactNativeDependenciesAsync(\n    templatesDirectory,\n    versionedRnPath,\n    rnExpoSubspecs,\n    shellAppSdkVersion\n  );\n  const versionedPostinstalls = await _renderVersionedReactNativePostinstallsAsync(\n    templatesDirectory,\n    shellAppSdkVersion\n  );\n  const podDependencies = await _renderPodDependenciesAsync(\n    path.join(templatesDirectory, 'dependencies.json'),\n    { isPodfile: true }\n  );\n\n  let universalModules = moreSubstitutions.UNIVERSAL_MODULES;\n  if (!universalModules) {\n    universalModules = [];\n  }\n\n  const substitutions = {\n    EXPONENT_CLIENT_DEPS: podDependencies,\n    PODFILE_UNVERSIONED_RN_DEPENDENCY: _renderUnversionedReactNativeDependency(\n      rnDependencyOptions,\n      sdkVersion\n    ),\n    PODFILE_DETACHED_POSTINSTALL: _renderDetachedPostinstall(sdkVersion, false),\n    PODFILE_VERSIONED_RN_DEPENDENCIES: versionedDependencies,\n    PODFILE_TEST_TARGET: shellAppSdkVersion ? '' : _renderTestTarget(reactNativePath),\n    ...moreSubstitutions,\n  };\n  _validatePodfileSubstitutions(substitutions);\n\n  let result = templateString;\n  for (const key in substitutions) {\n    if (substitutions.hasOwnProperty(key)) {\n      const replacement = substitutions[key];\n      result = result.replace(new RegExp(`\\\\$\\\\{${key}\\\\}`, 'g'), replacement);\n    }\n  }\n\n  await fs.writeFile(pathToOutput, result);\n}\n\nexport { renderExpoKitPodspecAsync, renderPodfileAsync };\n"],"sourceRoot":"/@expo/xdl@59.2.1/src"}