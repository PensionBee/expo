'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = recursiveOmitBy;

var _recursiveIterator = require('recursive-iterator');

var _recursiveIterator2 = _interopRequireDefault(_recursiveIterator);

var _delObjectPath = require('del-object-path');

var _delObjectPath2 = _interopRequireDefault(_delObjectPath);

var _lodash = require('lodash.merge');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function recursiveOmitBy(object, callback) {
  var results = (0, _lodash2.default)({}, object);

  for (var _len = arguments.length, recursiveIteratorOpts = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    recursiveIteratorOpts[_key - 2] = arguments[_key];
  }

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = new (Function.prototype.bind.apply(_recursiveIterator2.default, [null].concat([object], recursiveIteratorOpts)))()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var meta = _step.value;

      var shouldOmit = callback(meta);

      if (shouldOmit) {
        (0, _delObjectPath2.default)(results, meta.path.join('.'));
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return results;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LWVzNi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztrQkFJd0IsZTs7QUFKeEI7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFZSxTQUFTLGVBQVQsQ0FBeUIsTUFBekIsRUFBaUMsUUFBakMsRUFBcUU7QUFDbEYsTUFBTSxVQUFVLHNCQUFNLEVBQU4sRUFBVSxNQUFWLENBQWhCOztBQURrRixvQ0FBdkIscUJBQXVCO0FBQXZCLHlCQUF1QjtBQUFBOztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUdsRiw0REFBcUIsMkJBQXJCLGlCQUF1QyxNQUF2QyxHQUFrRCxxQkFBbEQsbUlBQTBFO0FBQUEsVUFBakUsSUFBaUU7O0FBQ3hFLFVBQU0sYUFBYSxTQUFTLElBQVQsQ0FBbkI7O0FBRUEsVUFBSSxVQUFKLEVBQWdCO0FBQ2QscUNBQWMsT0FBZCxFQUF1QixLQUFLLElBQUwsQ0FBVSxJQUFWLENBQWUsR0FBZixDQUF2QjtBQUNEO0FBQ0Y7QUFUaUY7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7QUFXbEYsU0FBTyxPQUFQO0FBQ0QiLCJmaWxlIjoic3Rkb3V0Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlY3Vyc2l2ZUl0ZXJhdG9yIGZyb20gJ3JlY3Vyc2l2ZS1pdGVyYXRvcic7XG5pbXBvcnQgZGVsT2JqZWN0UGF0aCBmcm9tICdkZWwtb2JqZWN0LXBhdGgnO1xuaW1wb3J0IG1lcmdlIGZyb20gJ2xvZGFzaC5tZXJnZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlY3Vyc2l2ZU9taXRCeShvYmplY3QsIGNhbGxiYWNrLCAuLi5yZWN1cnNpdmVJdGVyYXRvck9wdHMpIHtcbiAgY29uc3QgcmVzdWx0cyA9IG1lcmdlKHt9LCBvYmplY3QpO1xuXG4gIGZvciAobGV0IG1ldGEgb2YgbmV3IFJlY3Vyc2l2ZUl0ZXJhdG9yKG9iamVjdCwgLi4ucmVjdXJzaXZlSXRlcmF0b3JPcHRzKSkge1xuICAgIGNvbnN0IHNob3VsZE9taXQgPSBjYWxsYmFjayhtZXRhKTtcblxuICAgIGlmIChzaG91bGRPbWl0KSB7XG4gICAgICBkZWxPYmplY3RQYXRoKHJlc3VsdHMsIG1ldGEucGF0aC5qb2luKCcuJykpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHRzO1xufVxuIl19
